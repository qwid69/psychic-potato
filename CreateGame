import React, { useState, useEffect } from "react";
import { Game, User } from "@/entities/all";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { MapPin, Clock, Users, DollarSign, ArrowLeft } from "lucide-react";
import { format } from "date-fns";

export default function CreateGame() {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(false);
  const [gameData, setGameData] = useState({
    title: "",
    location: "",
    date: "",
    time: "",
    skill_level: "",
    description: "",
    court_cost: "",
    max_players: 4
  });

  useEffect(() => {
    loadUser();
  }, []);

  const loadUser = async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
      // Pre-fill location if user has one
      if (currentUser.location) {
        setGameData(prev => ({ ...prev, location: currentUser.location }));
      }
    } catch (error) {
      console.error("Error loading user:", error);
    }
  };

  const handleInputChange = (field, value) => {
    setGameData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!user) return;

    setLoading(true);
    try {
      const newGame = await Game.create({
        ...gameData,
        court_cost: parseFloat(gameData.court_cost) || 0,
        organizer_id: user.id,
        current_players: 1,
        status: "open"
      });

      navigate(createPageUrl("Dashboard"));
    } catch (error) {
      console.error("Error creating game:", error);
    }
    setLoading(false);
  };

  const isFormValid = () => {
    return gameData.title && gameData.location && gameData.date && 
           gameData.time && gameData.skill_level;
  };

  // Get today's date for min date
  const today = format(new Date(), 'yyyy-MM-dd');

  return (
    <div className="max-w-md mx-auto px-4 py-6">
      <div className="flex items-center space-x-4 mb-6">
        <Button
          variant="ghost"
          size="icon"
          onClick={() => navigate(createPageUrl("Dashboard"))}
          className="hover:bg-gray-100"
        >
          <ArrowLeft className="w-5 h-5" />
        </Button>
        <h1 className="text-2xl font-bold text-gray-900">Create Game</h1>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Game Title */}
        <div className="space-y-2">
          <label className="text-sm font-semibold text-gray-700">Game Title</label>
          <Input
            placeholder="e.g. Evening Padel Session"
            value={gameData.title}
            onChange={(e) => handleInputChange('title', e.target.value)}
            className="rounded-xl border-gray-200 focus:border-blue-500"
            required
          />
        </div>

        {/* Location */}
        <div className="space-y-2">
          <label className="text-sm font-semibold text-gray-700 flex items-center space-x-2">
            <MapPin className="w-4 h-4 text-blue-500" />
            <span>Location</span>
          </label>
          <Input
            placeholder="Court name or address"
            value={gameData.location}
            onChange={(e) => handleInputChange('location', e.target.value)}
            className="rounded-xl border-gray-200 focus:border-blue-500"
            required
          />
        </div>

        {/* Date & Time */}
        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="text-sm font-semibold text-gray-700">Date</label>
            <Input
              type="date"
              min={today}
              value={gameData.date}
              onChange={(e) => handleInputChange('date', e.target.value)}
              className="rounded-xl border-gray-200 focus:border-blue-500"
              required
            />
          </div>
          <div className="space-y-2">
            <label className="text-sm font-semibold text-gray-700 flex items-center space-x-2">
              <Clock className="w-4 h-4 text-green-500" />
              <span>Time</span>
            </label>
            <Input
              type="time"
              value={gameData.time}
              onChange={(e) => handleInputChange('time', e.target.value)}
              className="rounded-xl border-gray-200 focus:border-blue-500"
              required
            />
          </div>
        </div>

        {/* Skill Level & Players */}
        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="text-sm font-semibold text-gray-700">Skill Level</label>
            <Select value={gameData.skill_level} onValueChange={(value) => handleInputChange('skill_level', value)}>
              <SelectTrigger className="rounded-xl border-gray-200">
                <SelectValue placeholder="Select level" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="beginner">Beginner</SelectItem>
                <SelectItem value="intermediate">Intermediate</SelectItem>
                <SelectItem value="advanced">Advanced</SelectItem>
                <SelectItem value="professional">Professional</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="space-y-2">
            <label className="text-sm font-semibold text-gray-700 flex items-center space-x-2">
              <Users className="w-4 h-4 text-purple-500" />
              <span>Max Players</span>
            </label>
            <Select value={gameData.max_players.toString()} onValueChange={(value) => handleInputChange('max_players', parseInt(value))}>
              <SelectTrigger className="rounded-xl border-gray-200">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="4">4 Players</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        {/* Court Cost */}
        <div className="space-y-2">
          <label className="text-sm font-semibold text-gray-700 flex items-center space-x-2">
            <DollarSign className="w-4 h-4 text-orange-500" />
            <span>Cost per Player (optional)</span>
          </label>
          <Input
            type="number"
            step="0.01"
            placeholder="0.00"
            value={gameData.court_cost}
            onChange={(e) => handleInputChange('court_cost', e.target.value)}
            className="rounded-xl border-gray-200 focus:border-blue-500"
          />
        </div>

        {/* Description */}
        <div className="space-y-2">
          <label className="text-sm font-semibold text-gray-700">Description (optional)</label>
          <Textarea
            placeholder="Any additional details or requirements..."
            value={gameData.description}
            onChange={(e) => handleInputChange('description', e.target.value)}
            className="rounded-xl border-gray-200 focus:border-blue-500 h-24 resize-none"
          />
        </div>

        {/* Submit Button */}
        <div className="pt-4">
          <Button
            type="submit"
            disabled={!isFormValid() || loading}
            className="w-full bg-gradient-to-r from-green-500 to-blue-500 text-white py-4 rounded-xl font-semibold text-lg shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200 disabled:transform-none disabled:opacity-50"
          >
            {loading ? "Creating..." : "Create Game"}
          </Button>
        </div>
      </form>

      {/* Tips */}
      <div className="mt-8 p-4 bg-blue-50 rounded-xl">
        <h3 className="font-semibold text-blue-900 mb-2">ðŸ’¡ Tips for better games:</h3>
        <ul className="text-sm text-blue-700 space-y-1">
          <li>â€¢ Be specific about the location and court details</li>
          <li>â€¢ Set clear skill level expectations</li>
          <li>â€¢ Include parking or access information</li>
        </ul>
      </div>
    </div>
  );
}


import React, { useState, useEffect, useCallback } from "react";
import { User, GameParticipant, Game, GameResult } from "@/entities/all";
import { useLocation, useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { ArrowLeft, MapPin, Star, Phone, Mail, Trophy, ShieldCheck } from "lucide-react";
import { Button } from "@/components/ui/button";
import PastGameCard from "../components/profile/PastGameCard";

export default function PlayerProfile() {
  const location = useLocation();
  const navigate = useNavigate();
  const playerId = new URLSearchParams(location.search).get('id');
  const [player, setPlayer] = useState(null);
  const [pastGames, setPastGames] = useState([]);
  const [loading, setLoading] = useState(true);
  
  const loadProfile = useCallback(async () => {
    if (!playerId) return;
    setLoading(true);
    try {
      const playerData = await User.get(playerId);
      setPlayer(playerData);

      const participations = await GameParticipant.filter({ player_id: playerId });
      const gameIds = participations.map(p => p.game_id);

      if (gameIds.length > 0) {
        const completedGames = await Game.filter({ id: { $in: gameIds }, status: 'completed' });
        if (completedGames.length > 0) {
          const results = await GameResult.filter({ game_id: { $in: completedGames.map(g => g.id) } });
          
          const enrichedGames = completedGames.map(game => ({
            game,
            result: results.find(r => r.game_id === game.id),
          })).filter(g => g.result);

          setPastGames(enrichedGames);
        }
      }
    } catch (error) {
      console.error("Error loading profile:", error);
    }
    setLoading(false);
  }, [playerId]);

  useEffect(() => {
    loadProfile();
  }, [loadProfile]);

  const skillLevelColors = {
    beginner: "from-green-400 to-green-500",
    intermediate: "from-blue-400 to-blue-500",
    advanced: "from-purple-400 to-purple-500",
    professional: "from-red-400 to-red-500"
  };

  if (loading) {
    return <div className="max-w-md mx-auto px-4 py-6 animate-pulse">Loading profile...</div>;
  }
  
  if (!player) {
    return <div className="max-w-md mx-auto text-center py-10">Player not found.</div>;
  }

  return (
    <div className="max-w-md mx-auto px-4 py-6 space-y-6">
      <div className="flex items-center space-x-4">
        <Button variant="ghost" size="icon" onClick={() => navigate(-1)} className="hover:bg-gray-100">
          <ArrowLeft className="w-5 h-5" />
        </Button>
        <h1 className="text-2xl font-bold text-gray-900">Player Profile</h1>
      </div>

      <div className="bg-white rounded-2xl p-5 shadow-lg border border-gray-100 text-center space-y-4">
        <div className="relative inline-block">
          <div className="w-24 h-24 bg-gradient-to-r from-green-400 to-blue-500 rounded-full flex items-center justify-center text-white text-3xl font-bold shadow-lg">
            {player.full_name?.[0]?.toUpperCase() || "P"}
          </div>
        </div>
        <div>
          <h2 className="text-xl font-bold text-gray-900">{player.full_name}</h2>
          {player.location && <p className="text-gray-500 text-sm flex items-center justify-center space-x-1"><MapPin className="w-3 h-3"/><span>{player.location}</span></p>}
        </div>
        <div className={`inline-flex items-center px-4 py-2 rounded-full bg-gradient-to-r ${skillLevelColors[player.skill_level]} text-white shadow-md`}>
          <Star className="w-4 h-4 mr-2" />
          <span className="font-semibold capitalize">{player.skill_level}</span>
        </div>
        {player.bio && <p className="text-gray-600 text-sm pt-2">{player.bio}</p>}
      </div>

      <div className="bg-white rounded-2xl p-5 shadow-lg border border-gray-100 space-y-3">
        <h3 className="font-bold text-lg text-gray-800">Contact Info</h3>
        <div className="flex items-center space-x-3 text-gray-600">
          <Mail className="w-5 h-5 text-blue-500" />
          <span>{player.email}</span>
        </div>
        {player.phone && (
          <div className="flex items-center space-x-3 text-gray-600">
            <Phone className="w-5 h-5 text-green-500" />
            <span>{player.phone}</span>
          </div>
        )}
      </div>

      <div className="space-y-4">
        <h3 className="text-lg font-bold text-gray-900 flex items-center">
            <Trophy className="w-5 h-5 mr-3 text-yellow-500"/>
            Past Games
        </h3>
        {pastGames.length > 0 ? (
          <div className="space-y-3">
            {pastGames.map(({ game, result }) => (
              <PastGameCard key={game.id} game={game} result={result} viewedPlayerId={playerId} />
            ))}
          </div>
        ) : (
          <div className="text-center py-8 bg-white rounded-2xl shadow-lg border border-gray-100">
            <p className="text-gray-500">No completed games found.</p>
          </div>
        )}
      </div>
    </div>
  );
}
